import React, { useState } from 'react';
import './styles/AuthModal.css'; 
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import Cookies from 'js-cookie';

const AuthModal = ({ isOpen, onClose, onLogin, onRegister }) => {
    const { t } = useTranslation();
    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [confirmPassword, setConfirmPassword] = useState('');
    const [isLoggedIn, setIsLoggedIn] = useState(false); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const BASE_URL = 'http://localhost:3001';

    const handleToggleMode = () => {
        setIsLogin(!isLogin);
    };

    const handleTogglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const handleLogin = () => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        if (!username || !password) {
            alert('–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            return;
        }
        
        axios.post(`${BASE_URL}/login`, { username, password })
            .then(response => {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                console.log(response.data);
                onClose(); // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞
                const enteredUsername = username;
        
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—É–∫–∏ –≤ –≤–∏–¥–µ JSON —Å—Ç—Ä–æ–∫–∏
                const userData = { enteredUsername, password };
                Cookies.set('userData', JSON.stringify(userData));
                
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                setIsLoggedIn(true);
                window.location.reload(true);
                alert(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.`);
                // –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–µ–≥–æ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            })
            .catch(error => {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ
                if (error.response) {
                    // –û—à–∏–±–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 2xx)
                    alert(`–û—à–∏–±–∫–∞: ${error.response.data.message}`);
                } else if (error.request) {
                    // –û—à–∏–±–∫–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    alert('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
                } else {
                    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
                    alert(`–û—à–∏–±–∫–∞: ${error.message}`);
                }
            });
    };
    
    
    
    

    const handleRegister = () => {
        axios.post(`${BASE_URL}/register`, { email, username, password, confirmPassword })
            .then(response => {
                console.log(response.data);
                alert(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.`);
            })
            .catch(error => {
                if (error.response) {
                    alert(`–û—à–∏–±–∫–∞: ${error.response.data.message}`);
                } else if (error.request) {
                    alert('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
                } else {
                    alert(`–û—à–∏–±–∫–∞: ${error.message}`);
                }
            });
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    if (isLoggedIn) {
        return null;
    }

    return (
        <>
            {isOpen && (
                <div className="modal-overlay">
                    <div className="auth-modal">
                        <div className="close-button" onClick={onClose}>
                            &times;
                        </div>
                        <h2>{isLogin ? t('app.login') : t('app.register')}</h2>
                        <form>
                            {!isLogin && (
                                <label>
                                    {t('app.email')}:
                                    <input
                                        type="text"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        maxLength={32}
                                        className="input-field"
                                    />
                                </label>
                            )}
                            <label>
                                {isLogin ? t('app.usernameOrEmail') : t('app.username')}:
                                <input
                                    type="text"
                                    value={username}
                                    onChange={(e) => setUsername(e.target.value)}
                                    maxLength={32}
                                    className="input-field"
                                />
                            </label>
                            <label>
                                {t('app.password')}:
                                <div className="password-input">
                                    <input
                                        type={showPassword ? 'text' : 'password'}
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        maxLength={32}
                                        className="input-field"
                                    />
                                    <div className="eye-icon" onClick={handleTogglePasswordVisibility}>
                                        {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                                    </div>
                                </div>
                            </label>
                            {!isLogin && (
                                <label>
                                    {t('app.confirmPassword')}:
                                    <div className="password-input">
                                        <input
                                            type={showPassword ? 'text' : 'password'}
                                            value={confirmPassword}
                                            onChange={(e) => setConfirmPassword(e.target.value)}
                                            maxLength={32}
                                            className="input-field"
                                        />
                                        <div className="eye-icon" onClick={handleTogglePasswordVisibility}>
                                            {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                                        </div>
                                    </div>
                                </label>
                            )}
                            <div className="button-container">
                                <button type="button" onClick={isLogin ? handleLogin : handleRegister}>
                                    {isLogin ? t('app.login') : t('app.register')}
                                </button>
                                <button type="button" onClick={handleToggleMode}>
                                    {isLogin ? t('app.switchToRegister') : t('app.switchToLogin')}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
};

export default AuthModal;
